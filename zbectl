#!/bin/bash

# Utility for managing ZFS Boot Environments in Arch Linux
# 
# Source at <https://github.com/Finic8/zbectl>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage() {
	echo "zbectl: Utility for managing ZFS Boot Environments in Arch Linux"
	echo "zbectl list"
	echo "zbectl create [source] <target>"
	echo "zbectl rename [source] <target>"
	echo "zbectl destroy <target>..."
	echo "zbectl activate [target]"
	echo "zbectl mount <target> <mountpoint>"
	echo "zbectl unmount <target>"
	echo "zbectl chroot <target> [command]"
	echo "zbectl update"
	echo "zbectl install [grub arguments]"
	echo "zbectl partition <device>..."
	exit 2
}
[[ $# -eq 0 ]] && usage

die() {
	# 1st arg is the exitcode, others will be printed
	ERROR_CODE=$1
	shift
	printf "%s\n" "ERROR: ${@}"
	exit "$ERROR_CODE"
}

check_root() {
	if [[ $(id -u) != 0 ]]; then
		die 2 "Must be ran as root"
	fi
}
ROOTFS=$( mount | awk '/ \/ / {print $1}' )
ESPS=/boot/efi
GRUBCFG=/boot/grub/grub.cfg

EFI=false
[[ -d /sys/firmware/efi ]] && EFI=true

if echo ${ROOTFS} | grep -q "^/dev/"
then
	die 1 "The system does not boot from a ZFS pool"
fi

POOL=$( echo ${ROOTFS} | awk -F '/' '{print $1}' )

if [[ $( echo ${ROOTFS} | awk -F '/' '{print NF}' ) -lt 3 ]]
then
	die 1 "This system is not configured for boot environments"
fi

check_target() {
	# check if name is usable
	local TARGET=${1}
	local sane_name=$( echo "$TARGET" | tr -c -d 'a-zA-Z0-9-_.,' )
	if [[ "$TARGET" != "$sane_name" ]]
	then
		die 1 "name: '${TARGET}' contains invalid charaters" "Possible name: '${sane_name}'"
	fi
	unset sane_name

	# check if boot environment does already exist
	if zfs list -H -o name $POOL/ROOT/$TARGET &> /dev/null
	then
		die 1 "Boot environment '$TARGET' does already exist"
	fi
}
check_env_exist() {
	local TARGET=${1}
	if ! zfs list -H -o name $POOL/ROOT/$TARGET &> /dev/null
	then
		die 1 "Boot environment '$TARGET' does not exist"
	fi
}
check_env_in_use() {
	local TARGET=${1}
	if [[ "$POOL/ROOT/$TARGET" == $ROOTFS ]]
	then
		die 1 "Target boot environment '$TARGET' is in use"
	fi
}
create_clone() {
	# create a clone of the $TARGET boot environment
	SNAPSHOT=$POOL/ROOT/$SOURCE@zbectl_$(date "+%Y-%m-%d-%H:%M:%S")_$TARGET
	zfs snapshot -r $SNAPSHOT
	zfs clone -o canmount=noauto -o mountpoint=/ $SNAPSHOT $POOL/ROOT/$TARGET
}
promote_clones() {
	local TARGET=${1}
	zfs list -H -t all -o name,origin -r ${POOL} | while read NAME ORIGIN
	do
		if echo "${ORIGIN}" | grep -q -E "${POOL}/ROOT/${TARGET}(/.*@|@)" 2> /dev/null
		then
			zfs promote ${NAME}
		fi
	done
}
mount_env() {
	[[ $# -gt 2 ]] && usage
	TARGET=$1
	check_env_exist $TARGET
	MNT=/$POOL/ROOT/$TARGET
	[[ $# -eq 2 ]] && MNT=$2

	zfs set mountpoint=$MNT $POOL/ROOT/$TARGET
	zfs mount $POOL/ROOT/$TARGET
}
unmount_env() {
	[[ $# -gt 1 ]] && usage
	TARGET=$1
	check_env_exist $TARGET
	zfs unmount $POOL/ROOT/$TARGET
	zfs set mountpoint=/ $POOL/ROOT/$TARGET
}

parent_devices() {
	# zdb needs a zpool cachefile
	for device in $(zdb -C $POOL | awk -F\' '/path/{print $2}')
	do
		lsblk -pno PKNAME ${device}
	done
}
mount_esps() {
	# mounts each esp partition under $ESPS/PARTUUID and returns mountpoints
	[[ -d $ESPS ]] || mkdir $ESPS
	for parent in $(parent_devices)
	do
		local ESP_PARTUUID="$(lsblk -nfr -o PARTUUID,FSTYPE $parent | awk '/fat/{print $1}')"
		local ESP_MNT=$ESPS/$ESP_PARTUUID
		echo $ESP_MNT

		[[ -d $ESP_MNT ]] || mkdir $ESP_MNT
		mount /dev/disk/by-partuuid/$ESP_PARTUUID $ESP_MNT
		[[ $? ]] || die 3 "error mounting esp located on parent device: '$parent'"
	done
}
validate_device_paths() {
	# validates devices and returns their paths
	for device in ${@}
	do
		if fdisk -l $device &>/dev/null
		then
			echo $device
		elif fdisk -l /dev/$device &>/dev/null
		then
			echo "/dev/$device"
		else
			die 3 "device: '$device' not valid"
		fi
	done
}
partition_device() {
	local device=$1

	if [[ $EFI == true ]]
	then
		sgdisk --clear \
			--new=1:0:256M --typecode=1:ef00 \
			--largest-new=2 --typecode:2:bf00 \
			$device 1>/dev/null

		[[ $? ]] || die 3 "error paritioning device: '$device'"

		mkfs.fat -F32 $(fdisk -l $device | awk '/EFI System/{print $1}') 1>/dev/null
		[[ $? ]] || die 3 "error creating EFI filesystem: '$device'"
	else
		sgdisk --clear \
			--new=1:0:2M --typecode=1:ef02 \
			--largest-new=2 --typecode:2:bf00 \
			$device 1>/dev/null

		[[ $? ]] || die 3 "error paritioning device: '$device'"
	fi
}
update_grub() {
	ln -sf /dev/null /etc/grub.d/10_linux
	if [[ "$EFI" == true ]]
	then
		GRUBCFG=$(mount_esps | sed -e 's/$/\/grub\/grub.cfg/')
	fi
	ZPOOL_VDEV_NAME_PATH=1 grub-mkconfig | tee $GRUBCFG >/dev/null
	[[ $? ]] || die 1 "Updating grub unsuccessful"
}

subcmd=$1
shift
if [[ $subcmd == 'list' ]]
then
	zfs list -r -o name,used,available,referenced,mounted "$POOL"/ROOT
	echo
	if [[ ! -s $GRUBCFG ]];
	then
		die 1 "grub.cfg does not exist. Run zbectl install first"
	fi
	DEFAULT="$(grep "^GRUB_DEFAULT=" /etc/default/grub)"
	echo "Default entry: ${DEFAULT#GRUB_DEFAULT=}"
	exit 0
fi

check_root
case $subcmd in
'destroy')
	[[ $# -lt 1 ]] && usage
	for TARGET in ${@};
	do
		TARGET=$(basename "${TARGET}")
		check_env_exist $TARGET
		check_env_in_use $TARGET
		promote_clones $TARGET
		zfs destroy -r $POOL/ROOT/$TARGET
	done
	update_grub
	;;

'create')
	if [[ $# -eq 2 ]]
	then
		TARGET=$(basename "${2}")
		SOURCE=$(basename "${1}")
		check_env_exist $SOURCE
	elif [[ $# -eq 1 ]]
	then
		TARGET=$(basename "${1}")
		SOURCE=$(basename "$ROOTFS")
	else
		usage
	fi
	check_target $TARGET
	create_clone
	update_grub
	;;

'rename')
	[[ $# -eq 2 ]] || usage
	SOURCE=$(basename "${2}")
	check_env_exist $SOURCE
	check_env_in_use $SOURCE
	TARGET=$(basename "${3}")
	check_target $TARGET
	zfs rename $POOL/ROOT/$SOURCE $POOL/ROOT/$TARGET
	update_grub
	;;

'install')
	GRUB_ARGS="$@"

	if [[ "$EFI" == true ]]; then
		for ESP in $(mount_esps)
		do
			echo "Installing to: $ESP"
			ZPOOL_VDEV_NAME_PATH=1 grub-install --target=x86_64-efi --efi-directory=$ESP --boot-directory=$ESP ${GRUB_ARGS}
			[[ $? ]] || die 3 "Installing grub failed"
		done
	else
		for device in $(parent_devices)
		do
			echo "Installing to: $device"
			ZPOOL_VDEV_NAME_PATH=1 grub-install --target=i386-pc ${GRUB_ARGS} $device
			[[ $? ]] || die 3 "Installing grub failed"
		done
	fi
	update_grub
	;;
'partition')
	[[ $# -lt 1 ]] && usage

	devices="$(validate_device_paths ${@})"
	for device in ${devices}
	do
		partition_device $device
	done
	echo "Create your pool over the following devices:"
	lsblk -pl -o NAME,PARTUUID,FSTYPE,TYPE ${devices} |
		awk '!/disk|vfat/{print $1, $2}' | column -t
	;;
'update')
	update_grub
	;;

'mount')
	mount_env ${@}
	;;

'unmount')
	unmount_env ${@}
	;;
'chroot')
	[[ $# -lt 1 ]] && usage
	TARGET=$1
	shift
	mount_env $TARGET
	arch-chroot /$POOL/ROOT/$TARGET ${@}
	unmount_env $TARGET
	;;

'activate')
	[[ $# -gt 1 ]] && usage
	update_grub
	ENTRIES="$(grep ^menuentry $GRUBCFG | cut -d "'" -f2)"
	if [[ $# -eq 0 ]]
	then
		echo "Avialiable environments:"
		echo "$ENTRIES"
		exit 0
	fi
	TARGET="${1}"
	if ! ENTRY="$(echo "$ENTRIES" | grep "$TARGET")"
	then
		die 1 "No environment matches the provided name."
	fi
	if [[ $(echo "$ENTRY" | wc -l) -gt 1 ]]
	then
		die 1 "More than one environment matches the provided name:" "$ENTRY"
	fi
	sed -i "s/GRUB_DEFAULT.*/GRUB_DEFAULT=\"${ENTRY}\"/" /etc/default/grub
	update_grub
	;;
*)
	usage
	;;
esac
