#!/bin/bash

# Utility for managing ZFS Boot Environments in Arch Linux
# 
# Source at <https://github.com/Finic8/zbectl>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage() {
	echo "zbectl: Utility for managing ZFS Boot Environments in Arch Linux"
	echo "zbectl list"
	echo "zbectl create [source] <target>"
	echo "zbectl rename [source] <target>"
	echo "zbectl destroy <target>..."
	echo "zbectl activate [target]"
	echo "zbectl update"
	echo "zbectl install [grub arguments]"
	exit 0
}
[ $# -eq 0 ] && usage

die() {
	# 1st arg is the exitcode, others will be printed
	ERROR_CODE=$1
	shift
	printf "%s\n" "ERROR: ${@}"
	exit "$ERROR_CODE"
}

check_root() {
	if [ $(id -u) != 0 ]; then
		die 1 "Must be ran as root"
	fi
}
ROOTFS=$( mount | awk '/ \/ / {print $1}' )
EFI=false
ESP=/boot/efi
GRUBCFG=/boot/grub/grub.cfg
if $(mount | grep "${ESP}" -q); then
	EFI=true
	GRUBCFG=$ESP/grub/grub.cfg
fi

if echo ${ROOTFS} | grep -q "^/dev/"
then
	die 1 "The system does not boot from a ZFS pool"
fi

POOL=$( echo ${ROOTFS} | awk -F '/' '{print $1}' )

if [ $( echo ${ROOTFS} | awk -F '/' '{print NF}' ) -lt 3 ]
then
	die 1 "This system is not configured for boot environments"
fi

check_target() {
	# check if name is usable
	local TARGET=${1}
	local sane_name=$( echo "$TARGET" | tr -c -d 'a-zA-Z0-9-_.,' )
	if [[ "$TARGET" != "$sane_name" ]]
	then
		die 1 "name: '${TARGET}' contains invalid charaters" "Possible name: '${sane_name}'"
	fi
	unset sane_name

	# check if boot environment does already exist
	if zfs list -H -o name $POOL/ROOT/$TARGET &> /dev/null
	then
		die 1 "Boot environment '$TARGET' does already exist"
	fi
}
check_env_exist() {
	local TARGET=${1}
	if ! zfs list -H -o name $POOL/ROOT/$TARGET &> /dev/null
	then
		die 1 "Boot environment '$TARGET' does not exist"
	fi
}
check_env_in_use() {
	local TARGET=${1}
	if [ "$POOL/ROOT/$TARGET" == $ROOTFS ]
	then
		die 1 "Target boot environment '$TARGET' is in use"
	fi
}
create_clone() {
	# create a clone of the $TARGET boot environment
	SNAPSHOT=$POOL/ROOT/$SOURCE@zbectl_$(date "+%Y-%m-%d-%H:%M:%S")_$TARGET
	zfs snapshot -r $SNAPSHOT
	zfs clone -o canmount=noauto -o mountpoint=/ $SNAPSHOT $POOL/ROOT/$TARGET
}
promote_clones() {
	local TARGET=${1}
	zfs list -H -t all -o name,origin -r ${POOL} | while read NAME ORIGIN
	do
		if echo "${ORIGIN}" | grep -q -E "${POOL}/ROOT/${TARGET}(/.*@|@)" 2> /dev/null
		then
			zfs promote ${NAME}
		fi
	done
}
update_grub() {
	ln -sf /dev/null /etc/grub.d/10_linux
	if ! ZPOOL_VDEV_NAME_PATH=1 grub-mkconfig -o $GRUBCFG
	then
		die 1 "Updating grub unsuccessful"
	fi
	exit 0
}

subcmd=$1
shift
if [ $subcmd == 'list' ]
then
	zfs list -r -o name,used,available,referenced,mounted "$POOL"/ROOT
	echo
	if [ ! -s $GRUBCFG ];
	then
		die 1 "grub.cfg does not exist. Run zbectl install first"
	fi
	DEFAULT="$(grep "^GRUB_DEFAULT=" /etc/default/grub)"
	echo "Default entry: ${DEFAULT#GRUB_DEFAULT=}"
	exit 0
fi

check_root
case $subcmd in
'destroy')
	[ $# -lt 1 ] && usage
	for TARGET in ${@};
	do
		TARGET=$(basename "${TARGET}")
		check_env_exist $TARGET
		check_env_in_use $TARGET
		promote_clones $TARGET
		zfs destroy -r $POOL/ROOT/$TARGET
	done
	update_grub
	;;

'create')
	if [ $# -eq 2 ]
	then
		TARGET=$(basename "${2}")
		SOURCE=$(basename "${1}")
		check_env_exist $SOURCE
	elif [ $# -eq 1 ]
	then
		TARGET=$(basename "${1}")
		SOURCE=$(basename "$ROOTFS")
	else
		usage
	fi
	check_target $TARGET
	create_clone
	update_grub
	;;

'rename')
	SOURCE=$(basename "${2}")
	check_env_exist $SOURCE
	check_env_in_use $SOURCE
	TARGET=$(basename "${3}")
	check_target $TARGET
	zfs rename $POOL/ROOT/$SOURCE $POOL/ROOT/$TARGET
	update_grub
	;;

'install')
	GRUB_ARGS="$@"
	if [[ ${EFI} == true ]]; then
		grub-install --target=x86_64-efi --efi-directory=$ESP --boot-directory=$ESP "${GRUB_ARGS}"
	else
		grub-install --target=i386-pc "${GRUB_ARGS}"
	fi
	update_grub
	;;

'update')
	update_grub
	;;

'activate')
	[ $# -gt 1 ] && usage
	update_grub
	ENTRIES="$(grep ^menuentry $GRUBCFG | cut -d "'" -f2)"
	if [ $# -eq 0 ]
	then
		echo "Avialiable environments:"
		echo "$ENTRIES"
		exit 0
	fi
	TARGET="${1}"
	if ! ENTRY="$(echo "$ENTRIES" | grep "$TARGET")"
	then
		die 1 "No environment matches the provided name."
	fi
	if [ $(echo "$ENTRY" | wc -l) -gt 1 ]
	then
		die 1 "More than one environment matches the provided name:" "$ENTRY"
	fi
	sed -i "s/GRUB_DEFAULT.*/GRUB_DEFAULT=\"${ENTRY}\"/" /etc/default/grub
	update_grub
	;;
*)
	usage
	;;
esac
